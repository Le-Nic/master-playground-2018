{
    'convert_hd5': {
        'io_csv': {
            'train_dir': '',
            'test_dir': None,
            'output_dir': '/1_converted',
            'read_chunk_size': 100000,
            'delimiter': ',',
            'header': None,
            'dates': [],
            'is_epoch': True,
            'dtypes_in': {
                0: np.object, 1: np.object, 2: np.object, 3: np.object, 4: np.object, 5: np.object, 6: np.float64, 7: np.int64,
                8: np.int64, 9: np.int64, 10: np.int64, 11: np.int64, 12: np.int64, 13: np.object, 14: np.float64, 15: np.float64,
                16: np.int64, 17: np.int64, 18: np.int64, 19: np.int64, 20: np.int64, 21: np.int64, 22: np.int64, 23: np.int64,
                24: np.int64, 25: np.int64, 26: np.float64, 27: np.float64, 28: np.int64, 29: np.int64, 30: np.float64, 31: np.float64,
                32: np.float64, 33: np.float64, 34: np.float64, 35: np.int64, 36: np.int64, 37: np.int64, 38: np.int64, 39: np.int64,
                40: np.int64, 41: np.int64, 42: np.int64, 43: np.int64, 44: np.int64, 45: np.int64, 46: np.int64, 47: np.object,
                48: np.int64
            }
        },
        'normalization': 'minmax1r',
        'add_td': None,
        'td_scale': 1,
        'label': {
            'i': [47],
            'lbl_normal': [np.nan]
        },
        'pp': {
            't': [29],
            'ips': [0, 2],
            'int': [4, 5, 13],  # transform string objects to integers
            '1hot': [],
            'flg': [],  # .A.... -> 010000 (6)
            '8bit': [],  # 4 -> 00000100 (8)
            '16bit': [1, 3],  # 4 -> 0000000000000100 (16)
            'norm': [],  # apply technique selected in 'normalization'
            'rm': [28]  # col(s) to remove
        }
    },

    'process_hd5': {
        'io_hd5': {
            'meta_path': '/meta',
            'train_dir': '',
            'test_dir': '',
            'output_dir': '/4_processed',
            'arff_output': None,  # 1: save only last sequence, 2: save all instances, others: no arff output
            'temporal_dim': False,  # expand dimension for temporal tree (arff_output must be 1, m:1 labeling)
            'read_chunk_size': 100000
        },
        'normalization': 'minmax1r',
        'add_td': None,
        'td_scale': 1,
        'label': {
            'i': [],
            'lbl_normal': []
        },
        'pp': {
            't': [],
            'ips': [],
            'int': [],
            '1hot': [32, 33, 41],
            'flg': [],  # .A.... -> 010000 (6)
            '8bit': [],  # 4 -> 00000100 (8)
            '16bit': [],  # 4 -> 0000000000000100 (16)
            'norm': list(range(34, 41)) + list(range(42, 56)) + list((range(60, 77))),
            'rm': []  # col(s) to remove
        }
    }
}