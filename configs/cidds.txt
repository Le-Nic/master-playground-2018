# EG: [] vs [1,2,3]
# EG: None vs {0:0, 1:1, 3:3}
# EG: None vs 1
{
    'io_csv': {
        # 'train_dir': 'E:/data/CIDDS-001/OpenStack/CIDDS-001-internal-week1.csv',
        'train_dir': 'E:/data/CIDDS-001/OpenStack/CIDDS-001-train.csv',  # test
        # 'test_dir': 'E:/data/CIDDS-001/OpenStack/CIDDS-001-internal-week2.csv',
        'test_dir': 'E:/data/CIDDS-001/OpenStack/CIDDS-001-test.csv',  # test
        # 'output_dir': 'E:/data/CIDDS-001/OpenStack/processed/minmax1r/data',
        'output_dir': 'E:/data/CIDDS-001/OpenStack/processed_test/normal/data',  # test
        'output_type': 'hd5',
        'read_chunk_size': 2000000,
        'delimiter': ',',
        'header': None,  # True if header is present
        # parsing ith column(s) as dates
        'dates': [0],
        'is_epoch': False,  # True if date is epoch, replace column from 'dates' to 'dtypes_in' (format used: %s.%µs)
        # input data types for each column (omit labels if it's in separate file)
        'dtypes_in': {
            1: np.float64, 2: np.object, 3: np.object, 4: np.object,  # td, pr, sa, sp
            5: np.object, 6: np.object, 7: np.int64, 8: np.float64,  # da, dp, pkt, byt
            9: np.int64, 10: np.object, 11: np.int64, 12: np.object,  # fl, flg, stos, lbl
            13: np.object, 14: np.object, 15: np.object  # a.type, a.id, a.desc
        },
        # output data types to be expected after preprocessing, current dtype: Float64Atom()
        'dtypes_out': {}
    },
    'normalization': 'minmax1r',  # zscore (does not work on time feature), minmax1r, minmax2r

    # duration are treated as second with %.3f decimal places, and will be added into time column
    'add_td': 1,  # if dataset uses 'ts' column: input duration column, else: input None (format used: %s.%µs)
    'td_scale': 1,  # value for multiplication in order to convert duration to second (%s.%µs)
    'label': {
        'i': [12, 13],  # col to use (max len: 2), treating ith column(s) until as label(s)
        'lbl_normal': ['normal', '---']
        # the value of label which is "benign/normal" (same alignment w/ index above)
    },
    'pp': {
        't': [0],  # day & week cyclical transformation
        'ips': [3, 5],
        '1hot': [2],
        'flg': [10],  # .A.... -> 010000 (6)
        '8bit': [11],  # 4 -> 00000100 (8)
        '16bit': [4, 6],  # 4 -> 0000000000000100 (16)
        'norm': [1, 7, 8],  # apply technique selected in 'normalization'
        'rm': [9]  # col(s) to remove
    }
}